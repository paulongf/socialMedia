{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paulo\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\social-media-react\\\\client\\\\src\\\\components\\\\posts\\\\Posts.jsx\",\n  _s = $RefreshSig$();\nimport Post from \"../post/Post\";\nimport \"./posts.scss\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { makeRequest } from \"../../axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = ({\n  userId\n}) => {\n  _s();\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery({\n    queryKey: [\"posts\", userId],\n    // Inclua userId na chave\n    queryFn: () => makeRequest.get(`/posts?userId=${userId}`).then(res => res.data),\n    enabled: !!userId // Evita chamadas com userId undefined ou null\n  });\n  console.log(\"Data recebida:\", data); // Verifica se a API está retornando corretamente\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: error ? \"Something went wrong!\" : isLoading ? \"Loading...\" : Array.isArray(data) ?\n    // ✅ Garante que `data` seja um array antes do `.map()`\n    data.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 28\n    }, this)) : \"Nenhum post encontrado.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"P7jBIA24rc00P7RvfXjpVl6dqRI=\", false, function () {\n  return [useQuery];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["Post","useQuery","makeRequest","jsxDEV","_jsxDEV","Posts","userId","_s","isLoading","error","data","queryKey","queryFn","get","then","res","enabled","console","log","className","children","Array","isArray","map","post","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/paulo/OneDrive/Área de Trabalho/social-media-react/client/src/components/posts/Posts.jsx"],"sourcesContent":["import Post from \"../post/Post\";\r\nimport \"./posts.scss\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { makeRequest } from \"../../axios\";\r\n\r\nconst Posts = ({ userId }) => {\r\n  const { isLoading, error, data } = useQuery({\r\n    queryKey: [\"posts\", userId], // Inclua userId na chave\r\n    queryFn: () =>\r\n      makeRequest.get(`/posts?userId=${userId}`).then((res) => res.data),\r\n    enabled: !!userId, // Evita chamadas com userId undefined ou null\r\n  });\r\n\r\n  console.log(\"Data recebida:\", data); // Verifica se a API está retornando corretamente\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      {error ? (\r\n        \"Something went wrong!\"\r\n      ) : isLoading ? (\r\n        \"Loading...\"\r\n      ) : Array.isArray(data) ? ( // ✅ Garante que `data` seja um array antes do `.map()`\r\n        data.map((post) => <Post post={post} key={post.id} />)\r\n      ) : (\r\n        \"Nenhum post encontrado.\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,cAAc;AAC/B,OAAO,cAAc;AACrB,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,QAAQ,CAAC;IAC1CU,QAAQ,EAAE,CAAC,OAAO,EAAEL,MAAM,CAAC;IAAE;IAC7BM,OAAO,EAAEA,CAAA,KACPV,WAAW,CAACW,GAAG,CAAC,iBAAiBP,MAAM,EAAE,CAAC,CAACQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACL,IAAI,CAAC;IACpEM,OAAO,EAAE,CAAC,CAACV,MAAM,CAAE;EACrB,CAAC,CAAC;EAEFW,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAER,IAAI,CAAC,CAAC,CAAC;;EAErC,oBACEN,OAAA;IAAKe,SAAS,EAAC,OAAO;IAAAC,QAAA,EACnBX,KAAK,GACJ,uBAAuB,GACrBD,SAAS,GACX,YAAY,GACVa,KAAK,CAACC,OAAO,CAACZ,IAAI,CAAC;IAAK;IAC1BA,IAAI,CAACa,GAAG,CAAEC,IAAI,iBAAKpB,OAAA,CAACJ,IAAI;MAACwB,IAAI,EAAEA;IAAK,GAAMA,IAAI,CAACC,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,GAEtD;EACD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACtB,EAAA,CAvBIF,KAAK;EAAA,QAC0BJ,QAAQ;AAAA;AAAA6B,EAAA,GADvCzB,KAAK;AAyBX,eAAeA,KAAK;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}